// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	GetCertificateRequest
	GetCertificateReply
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCertificateRequest struct {
	Domain   string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Exponent int64  `protobuf:"varint,2,opt,name=exponent" json:"exponent,omitempty"`
	Modulus  []byte `protobuf:"bytes,3,opt,name=modulus,proto3" json:"modulus,omitempty"`
}

func (m *GetCertificateRequest) Reset()                    { *m = GetCertificateRequest{} }
func (m *GetCertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCertificateRequest) ProtoMessage()               {}
func (*GetCertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetCertificateRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *GetCertificateRequest) GetExponent() int64 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *GetCertificateRequest) GetModulus() []byte {
	if m != nil {
		return m.Modulus
	}
	return nil
}

type GetCertificateReply struct {
	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *GetCertificateReply) Reset()                    { *m = GetCertificateReply{} }
func (m *GetCertificateReply) String() string            { return proto.CompactTextString(m) }
func (*GetCertificateReply) ProtoMessage()               {}
func (*GetCertificateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetCertificateReply) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCertificateRequest)(nil), "GetCertificateRequest")
	proto.RegisterType((*GetCertificateReply)(nil), "GetCertificateReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TLSService service

type TLSServiceClient interface {
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateReply, error)
}

type tLSServiceClient struct {
	cc *grpc.ClientConn
}

func NewTLSServiceClient(cc *grpc.ClientConn) TLSServiceClient {
	return &tLSServiceClient{cc}
}

func (c *tLSServiceClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateReply, error) {
	out := new(GetCertificateReply)
	err := grpc.Invoke(ctx, "/TLSService/GetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TLSService service

type TLSServiceServer interface {
	GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateReply, error)
}

func RegisterTLSServiceServer(s *grpc.Server, srv TLSServiceServer) {
	s.RegisterService(&_TLSService_serviceDesc, srv)
}

func _TLSService_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TLSServiceServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TLSService/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TLSServiceServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TLSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TLSService",
	HandlerType: (*TLSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificate",
			Handler:    _TLSService_GetCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x4a, 0xe5, 0x12, 0x75, 0x4f, 0x2d, 0x71, 0x4e,
	0x2d, 0x2a, 0xc9, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x11, 0x12, 0xe3, 0x62, 0x4b, 0xc9, 0xcf, 0x4d, 0xcc, 0xcc, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0xf2, 0x84, 0xa4, 0xb8, 0x38, 0x52, 0x2b, 0x0a, 0xf2, 0xf3, 0x52, 0xf3, 0x4a, 0x24,
	0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0xe0, 0x7c, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xfc, 0x94, 0xd2,
	0x9c, 0xd2, 0x62, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x18, 0x57, 0xc9, 0x9c, 0x4b, 0x18,
	0xdd, 0x9a, 0x82, 0x9c, 0x4a, 0x21, 0x05, 0x2e, 0xee, 0x64, 0x84, 0x18, 0xd8, 0x26, 0x9e, 0x20,
	0x64, 0x21, 0x23, 0x1f, 0x2e, 0xae, 0x10, 0x9f, 0xe0, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54,
	0x21, 0x3b, 0x2e, 0x3e, 0x54, 0x63, 0x84, 0xc4, 0xf4, 0xb0, 0x3a, 0x5f, 0x4a, 0x44, 0x0f, 0x8b,
	0x7d, 0x49, 0x6c, 0x60, 0x4f, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xb5, 0xcc, 0xe8,
	0x03, 0x01, 0x00, 0x00,
}
